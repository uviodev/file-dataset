[project]
name = "file-dataset"
version = "0.1.0"
description = "Add your description here"
readme = "README.md"
authors = [
    { name = "Patrick Violette", email = "violette.patrick718@gmail.com" }
]
requires-python = ">=3.12"
dependencies = ["boto3>=1.34.0"]

[project.scripts]
lint = "file_dataset.scripts:pre_commit"

[project.optional-dependencies]
dev = ["pytest>=7.0.0"]

[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "vcs"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "pre-commit>=3.5.0",
    "ruff>=0.8.0",
    "bandit[toml]>=1.8.0",
    "safety>=3.2.0",
    "mypy>=1.14.0",
    "moto[s3]>=5.0.0",
    "boto3-stubs[s3]>=1.34.0",
    "pytest-mock>=3.14.0",
]

[tool.ruff]
line-length = 88
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "UP",     # pyupgrade
    "D",      # pydocstyle
    "SIM",    # flake8-simplify
    "N",      # pep8-naming
    "S",      # flake8-bandit security checks
    "BLE",    # flake8-blind-except
    "FBT",    # flake8-boolean-trap
    "A",      # flake8-builtins
    "COM",    # flake8-commas
    "C90",    # mccabe complexity
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "G",      # flake8-logging-format
    "INP",    # flake8-no-pep420
    "PIE",    # flake8-pie
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SLF",    # flake8-self
    "SLOT",   # flake8-slots
    "TID",    # flake8-tidy-imports
    "TCH",    # flake8-type-checking
    "INT",    # flake8-gettext
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "TD",     # flake8-todos
    "FIX",    # flake8-fixme
    "ERA",    # eradicate
    "PL",     # Pylint
    "TRY",    # tryceratops
    "FLY",    # flynt
    "NPY",    # NumPy-specific rules
    "RUF",    # Ruff-specific rules
]
ignore = [
    "D203",   # one-blank-line-before-class (conflicts with D211)
    "D213",   # multi-line-summary-second-line (conflicts with D212)
    "COM812", # missing-trailing-comma (conflicts with formatter)
    "ISC001", # single-line-implicit-string-concatenation (conflicts with formatter)
]

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",    # assert usage is expected in tests
    "D100", "D101", "D102", "D103", "D104",  # docstring requirements relaxed for tests
    "S105",    # hardcoded passwords are fine in tests
    "S301",    # pickle usage is being tested
    "SLF001",  # accessing private members is necessary in tests
    "PLR2004", # magic values are fine in tests
    "SIM117",  # nested with statements are clearer in tests
]
"src/file_dataset/scripts.py" = ["S603"]  # subprocess is safe here - using sys.executable

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = []

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true
